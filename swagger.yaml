openapi: 3.0.0
info:
  title: Tickets API
  version: 1.0.0
  description: Tickets API

servers:
  - url: http://localhost:4000
    description: Local Development Server

tags:
  - name: Users
    description: User API calls

components:
  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: '61890767e0fff743b84689e4'
        email:
          type: string
          format: email
          example: 'example@gmail.com'
        name:
          type: string
          example: 'John'
        createdAt:
          type: string
          format: datetime
          example: '2001-01-01T00:00:00.001Z'
        modifiedAt:
          type: string
          format: datetime
          example: '2001-01-01T00:00:00.001Z'
    CreateUser:
      type: object
      properties:
        email:
          type: string
          format: email
          example: 'example@gmail.com'
        password:
          type: string
          format: password
        name:
          type: string
          example: 'John'
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          example: 'example@gmail.com'
        password:
          type: string
          format: password
  parameters:
    ticketid:
      in: path
      name: id
      description: ID of the Ticket
      required: true
      example: '6e793f1ecbc24f319e89'
      schema:
        type: string
  requestBodies:
    CreateUserRequest:
      required: true
      description: Create User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUser'
    LoginUserRequest:
      required: true
      description: Login with Credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'
paths:
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        $ref: '#/components/requestBodies/CreateUserRequest'
      responses:
        200:
          description: New Ticket Created
          content:
            application/json:
              example:
                message: Token
        400:
          description: Invalid input
          content:
            application/json:
              example:
                message: Invalid Input Provided
  /users/login:
    post:
      tags:
        - Users
      summary: Existing User login
      requestBody:
        $ref: '#/components/requestBodies/LoginUserRequest'
      responses:
        200:
          description: Successful login
          content:
            application/json:
              example:
                message: Token
        400:
          description: Invalid Credentials
          content:
            application/json:
              example:
                message: Email or Password is incorrect
  /users/me:
    get:
      security:
        - token: []
      tags:
        - Users
      summary: Get your information

      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
